---
layout: default
title: 'JBoss Stacks'
---
- page.javascripts = [ "#{site.base_url}/javascripts/jquery-datatables.js", "#{site.base_url}/javascripts/jquery.tools.min.js", "https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.21/jquery-ui.js" ] 

:markdown
  JBoss Stacks allows you to easily choose and use a stack of JBoss runtimes, frameworks and tools. 

  The JBoss BOMs project allows you to easily  use your stack of choice. 

  The JDF plugin allows you to easily add stacks to your project using Forge.

  ------------------------------------------

.stacks

  %table.table.table-bordered#runtimes
    %thead
      %tr
        %th Release
        %th Suggested Runtime
        %th Suggested BOM
        %th Suggested Archetype
        %th Download
        %th.hidden Runtime ID
    - site.stacks.minorReleases.each do |mr|
      %tr
        %td 
          %strong  #{mr.name} #{mr.version}
        %td 
          #{mr.recommendedRuntime.name}
        %td{:rel=>"##{mr.recommendedRuntime.defaultBom.link_id}"} 
          .overlay_link
            #{mr.recommendedRuntime.defaultBom.name} 
        %td{:rel=>"##{mr.recommendedRuntime.defaultArchetype.link_id}"} 
          .overlay_link
            #{mr.recommendedRuntime.defaultArchetype.name}
        %td.centered
          %a{:href => "#{mr.recommendedRuntime.url}"}
            %img{:src=>"#{site.base_url}/images/glyphicons/glyphicons_181_download_alt.png"}
        %td.hidden #{mr.object_id}
  
  -# Create Archetypes Table
  - site.stacks.availableArchetypes.each do |archetype|
    %div{:id=>"#{archetype.link_id}", :class=>"simple_overlay"}
      .contentWrap
        %h2 #{archetype.name}
        #{archetype.description}
        %p
        %br
        To use the archetype to generate a new project, you should run:
        %pre
          %code
            = preserve do
              :escaped
                mvn archetype:generate \
                  -DarchetypeGroupId=#{archetype.groupId} \
                  -DarchetypeArtifactId=#{archetype.artifactId} \
                  -DarchetypeVersion=#{archetype.recommendedVersion} 
        
        %p
        %br
        %h5 Available Versions
        %ul
        - archetype.availableVersions.each do |v|
          %li
            %a{:onclick=>"change_archetype_version(this, $('##{archetype.link_id} pre code'));"} - #{v}
            = '(Recommended)' unless archetype.recommendedVersion != v
        %p
        More information: See
        %a{:href=>"#{site.base_url}/quickstarts/jboss-as-quickstart/guide/Archetype/"}  Getting Started Developing Applications

  -# Create BOMs Table
  - site.stacks.availableBoms.each do |bom|
    %div{:id=>"#{bom.link_id}", :class=>"simple_overlay"}
      .contentWrap
        %h2 #{bom.name}
        #{bom.description}
        %p
        %br
        %p To use the BOM, import into your dependency management:
        %pre
          %code#example
            = preserve do
              :escaped
                <dependencyManagement>
                    <dependencies>
                        <dependency>
                            <groupId>#{bom.groupId}</groupId>
                            <artifactId>#{bom.artifactId}</artifactId>
                            <version>#{bom.recommendedVersion}</version>
                            <type>pom</scope>
                            <scope>import</scope>
                        </dependency>
                    </dependencies>
                </dependencyManagement>
        - if get_label_content(bom.labels,'jbossASPluginVersion') != nil
          = partial('plugininfo.html.haml')
        %p
        %br
        %h5 Available Versions
        %ul
          - bom.availableVersions.each do |v|
            %li
              %a{:onclick=>"change_bom_version(this, $('##{bom.link_id} #example'));"} - #{v} 
              = '(Recommended)' unless bom.recommendedVersion != v
    

  .hidden
    - site.stacks.minorReleases.each do |mr|
      -# Create BOM Table for each Runtime 
      %table{:id => "boms#{mr.object_id}", :class => "table table-bordered"}
        %thead
          %th Available Boms for #{mr.recommendedRuntime.name}
          %th Recommended Bom version
        - mr.recommendedRuntime.boms.each do |bom|
          %tr
            %td
              %a{:rel=>"##{bom.link_id}", :href=>"#"} #{bom.name}
            %td 
              %a{:rel=>"##{bom.link_id}", :href=>"#"} #{bom.recommendedVersion}
      -# Create Archetypes Table for each Runtime 
      %table{:id=>"archetypes#{mr.object_id}", :class => "table table-bordered"}
        %thead
          %th Available Archetypes for #{mr.recommendedRuntime.name}
          %th Recommended Archetype version
        - mr.recommendedRuntime.archetypes.each do |archetype|
          %tr
            %td 
              %a{:rel=>"##{archetype.link_id}", :href=>"#"} #{archetype.name}
            %td 
              %a{:rel=>"##{archetype.link_id}", :href=>"#"} #{archetype.recommendedVersion}

:javascript

  function change_bom_version(origin, destination){
    var newValue = origin.firstChild.data.substring(2);
    var allContent = destination.text();
    var start = allContent.indexOf('<version>') + '<version>'.length;
    var end = allContent.indexOf('</version>');
    var oldContent = allContent.substring(start,end);
    var newContent = allContent.replace(oldContent, newValue);
    destination.text(newContent);
  }

  function change_archetype_version(origin, destination){
    var newValue = origin.firstChild.data.substring(2);
    var allContent = destination.text();
    var start = allContent.indexOf('-DarchetypeVersion=') + '-DarchetypeVersion='.length;
    var oldContent = allContent.substring(start);
    var newContent = allContent.replace(oldContent, newValue);
    destination.text(newContent);
  }
  $.easing.drop = function (x, t, b, c, d) {
      return -c * (Math.sqrt(1 - (t/=d)*t) - 1) + b;
  };

  $.tools.overlay.addEffect('drop', function(css, done) {
 
    // use Overlay API to gain access to crucial elements
    var conf = this.getConf(),
    overlay = this.getOverlay();
 
    // determine initial position for the overlay
    if (conf.fixed)  {
        css.position = 'fixed';
    } else {
        css.top += $(window).scrollTop();
        css.left += $(window).scrollLeft();
        css.position = 'absolute';
    }
 
    // position the overlay and show it
    overlay.css(css).show();
 
    // begin animating with our custom easing
    overlay.animate(
        { top: '+=55',  opacity: 1,  width: '+=20'}, 400, 'drop', done
    );
 
    /* closing animation */
  }, function(done) {
      this.getOverlay().animate(
          {top:'-=55', opacity:0, width:'-=20'}, 300, 'drop',
          function() {
              $(this).hide();
              done.call();
          });
  });  


   /* Formating function for row details */
  function fnFormatDetails ( oTable, nTr )
  {
      var aData = oTable.fnGetData( nTr );
      var sTableBoms =  document.getElementById('boms'+ aData[6]).outerHTML;
      var sTableArchetypes =  document.getElementById('archetypes'+ aData[6]).outerHTML;
      return sTableBoms + sTableArchetypes;
  }

  $(document).ready(function() {

      $('#accordion').accordion({ autoHeight: false, collapsible: true , navigation: true, active: false});      

      /*
      * Insert a 'details' column to the table
      */
      var nCloneTh = document.createElement( 'th' );
      var nCloneTd = document.createElement( 'td' );
      nCloneTd.innerHTML = '<img src="#{site.base_url}/images/details_open.png">';
      nCloneTd.className = "centered";
       
      $('#runtimes thead tr').each( function () {
          this.insertBefore( nCloneTh, this.childNodes[0] );
      } );
       
      $('#runtimes tbody tr').each( function () {
          this.insertBefore(  nCloneTd.cloneNode( true ), this.childNodes[0] );
      } );
       
      /*
      * Initialse DataTables, with no sorting on the 'details' column
      */
      var oTable = $('#runtimes').dataTable(  {
        "bPaginate": false,
        "bLengthChange": false,
        "bFilter": false,
        "bSort": false,
        "bInfo": false,
        "bAutoWidth": false
      });
       
      /* Add event listener for opening and closing details
      * Note that the indicator for showing which row is open is not controlled by DataTables,
      * rather it is done here
      */
      $('#runtimes tbody td img').live('click', function () {
          var nTr = $(this).parents('tr')[0];
          if ( oTable.fnIsOpen(nTr) )
          {
              /* This row is already open - close it */
              this.src = "#{site.base_url}/images/details_open.png";
              oTable.fnClose( nTr );
          }
          else
          {
              /* Open this row */
              this.src = "#{site.base_url}/images/details_close.png";
              oTable.fnOpen( nTr, fnFormatDetails(oTable, nTr), 'details' );
             $('a[rel]').overlay({
                effect: 'drop',
                mask: '#789'
              });
          }
      } );
      $('td[rel]').overlay({
          effect: 'drop',
          mask: '#789'
       });
  } );


 
